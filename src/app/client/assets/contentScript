!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.absoluteUrlRegex=/^(https?:)?\/{2}(?!\/)/,e.getElementAttribute=function(t,e){return t?e(t):null},e.matchGetAbsoluteUrl=function(t){if(t){var n=t.match(e.absoluteUrlRegex);if(n)return n[1]?t:window.location.protocol+t}return null},e.cloneNodeWithReference=function t(e){var n=e.cloneNode();n.originalNode=e.originalNode||e;for(var i=0;i<e.childNodes.length;i++)n.appendChild(t(e.childNodes[i]));return n},e.getWords=function(t){return t&&t.match(/\S+/g)||[]}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(e){if(e[0]instanceof t){var n=e;this._state=n[0]._state.slice();for(var i=1;i<n.length;i++)Math.sign(n[i]._state[0])===Math.sign(this._state[this._state.length-1])?(this._state[this._state.length-1]+=n[i]._state[0],n[i]._state.length>1&&(this._state=this._state.concat(n[i]._state.slice(1)))):this._state=this._state.concat(n[i]._state)}else this._state=e;this._updateCountCache()}return t.prototype._updateCountCache=function(){this._wordCount=0,this._wordsRead=0;for(var t=0;t<this._state.length;t++)this._wordCount+=Math.abs(this._state[t]),this._state[t]>0&&(this._wordsRead+=this._state[t])},t.prototype.getPercentComplete=function(){return 100*this._wordsRead/this._wordCount},t.prototype.isComplete=function(){return this._wordsRead===this._wordCount},t.prototype.readWord=function(){return!this.isComplete()&&(-1===this._state[0]?(this._state.splice(0,1),this._state[0]?this._state[0]++:this._state[0]=1):(this._state[0]>0?this._state[0]++:this._state.unshift(1),-1===this._state[1]?(this._state.splice(1,1),this._state.length>=2&&(this._state[0]+=this._state.splice(1,1)[0])):this._state[1]++),this._wordsRead++,!0)},t.prototype.slice=function(e,n){for(var i,r,a=0,o=0,s=0,l=[];o+Math.abs(this._state[a])<=e;)o+=Math.abs(this._state[a++]);for(;s!==n;)i=Math.min(Math.abs(this._state[a])-(e-o),n-s),(r=Math.sign(this._state[a]))===Math.sign(l[l.length-1])?l[l.length-1]+=r*i:l.push(r*i),o+=e-o,s+=i,a++;return new t(l)},Object.defineProperty(t.prototype,"wordCount",{get:function(){return this._wordCount},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"readStateArray",{get:function(){return this._state},enumerable:!0,configurable:!0}),t}();e.default=i},function(t,e,n){"use strict";var i=this&&this.__assign||function(){return(i=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var r,a,o=n(3),s=n(4),l=n(5),c=n(6),d=n(11),u=!1,h={path:window.location.pathname,page:null,lastCommitPercentComplete:0},f=new s.default({onLoadPage:v,onUnloadPage:E,onShowOverlay:function(t){r.showOverlay=t,h.page&&h.page.showOverlay(t)},onHistoryStateUpdated:function(t){window.clearTimeout(a),a=window.setTimeout(function(){var e=new URL(t).pathname;e!==h.path&&(h.path=e,setTimeout(v,2e3))},250)}}),p={readWord:{}};function g(){h.page.readWord()?p.readWord.rate===r.config.idleReadRate&&(window.clearInterval(p.readWord.handle),p.readWord={handle:window.setInterval(g,r.config.readWordRate),rate:r.config.readWordRate},p.commitReadState=window.setInterval(_,r.config.readStateCommitRate)):h.page.isRead()?(b(),_()):p.readWord.rate===r.config.readWordRate&&(window.clearInterval(p.readWord.handle),p.readWord={handle:window.setInterval(g,r.config.idleReadRate),rate:r.config.idleReadRate},window.clearInterval(p.commitReadState))}function m(){h.page.updateOffset()}function _(){var t=h.page.getReadState(),e=t.getPercentComplete();f.commitReadState({userPageId:h.page.userPageId,readState:t.readStateArray},h.lastCommitPercentComplete<90&&e>=90).catch(function(){}),h.lastCommitPercentComplete=e}function y(){u||h.page.isRead()||(p.readWord={handle:window.setInterval(g,r.config.idleReadRate),rate:r.config.idleReadRate},p.updatePageOffset=window.setInterval(m,r.config.pageOffsetUpdateRate),u=!0,g())}function b(){u&&(clearTimeout(p.readWord.handle),clearInterval(p.updatePageOffset),clearInterval(p.commitReadState),u=!1)}function v(){E().then(function(){var t=r.sourceRules.filter(function(t){return t.path.test(h.path)}).sort(function(t,e){return e.priority-t.priority})[0];if(!t||t.action!==l.SourceRuleAction.Ignore){var e=c.default();if(!r.parseMetadata||e.isArticle&&e.metadata.url&&e.metadata.article.title||t&&t.action===l.SourceRuleAction.Read){var n=d.default(r.parseMode),a=e.metadata.article.description||n.excerpt;n.elements.length&&(!r.parseMetadata||e.metadata.url&&e.metadata.article.title)&&(h.page=new o.default(n.elements,r.showOverlay),f.registerPage(i({},e.metadata,{wordCount:n.wordCount,readableWordCount:h.page.wordCount,article:i({},e.metadata.article,{description:a})})).then(function(t){h.page.initialize(t),"visible"===document.visibilityState&&y()}).catch(function(){E()}))}}})}function E(){return h.page?(b(),h.page.remove(),h.page=null,h.lastCommitPercentComplete=0,f.unregisterPage()):Promise.resolve()}document.addEventListener("visibilitychange",function(){h.page&&(document.hidden?b():y())}),window.addEventListener("unload",function(){return f.unregisterContentScript()}),f.registerContentScript(window.location).then(function(t){r=i({},t,{sourceRules:t.sourceRules.map(function(t){return i({},t,{path:new RegExp(t.path)})})}),t.loadPage&&v()})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(1),r=function(){function t(t,e){this._contentEls=t.sort(function(t,e){return t.offsetTop-e.offsetTop}),this._contentEls.forEach(function(t){return t.showOverlay(e)}),this._wordCount=this.getReadState().wordCount}return t.prototype.setReadState=function(t){var e=new i.default(t),n=0;return this._contentEls.forEach(function(t){var r=e.wordCount-n;r>=t.wordCount?t.setReadState(e.slice(n,t.wordCount)):r>0?t.setReadState(new i.default([e.slice(n,r),new i.default([-(t.wordCount-r)])])):t.setReadState(new i.default([-t.wordCount])),n+=t.wordCount}),this},t.prototype.getReadState=function(){return new i.default(this._contentEls.map(function(t){return t.getReadState()}))},t.prototype.initialize=function(t){this._userPageId=t.id,this.setReadState(t.readState)},t.prototype.updateOffset=function(){this._contentEls.forEach(function(t){return t.updateOffset()})},t.prototype.isRead=function(){return!this._contentEls.some(function(t){return!t.isRead()})},t.prototype.readWord=function(){var t=this._contentEls.find(function(t){return t.isReadable()});return!!t&&t.readWord()},t.prototype.showOverlay=function(t){this._contentEls.forEach(function(e){return e.showOverlay(t)})},t.prototype.remove=function(){this._contentEls.forEach(function(t){return t.showOverlay(!1)})},Object.defineProperty(t.prototype,"userPageId",{get:function(){return this._userPageId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"wordCount",{get:function(){return this._wordCount},enumerable:!0,configurable:!0}),t}();e.default=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t){chrome.runtime.onMessage.addListener(function(e,n,i){switch(e.type){case"loadPage":t.onLoadPage();break;case"unloadPage":t.onUnloadPage();break;case"showOverlay":t.onShowOverlay(e.data);break;case"updateHistoryState":t.onHistoryStateUpdated(e.data)}})}return t.sendMessage=function(t,e){return new Promise(function(n,i){try{chrome.runtime.sendMessage({to:"eventPage",type:t,data:e},n)}catch(t){i()}})},t.prototype.registerContentScript=function(e){return t.sendMessage("registerContentScript",e.toString())},t.prototype.registerPage=function(e){return t.sendMessage("registerPage",e)},t.prototype.commitReadState=function(e,n){return t.sendMessage("commitReadState",{commitData:e,isCompletionCommit:n})},t.prototype.unregisterPage=function(){return t.sendMessage("unregisterPage")},t.prototype.unregisterContentScript=function(){return t.sendMessage("unregisterContentScript")},t}();e.default=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t[t.Default=0]="Default",t[t.Read=1]="Read",t[t.Ignore=2]="Ignore"}(e.SourceRuleAction||(e.SourceRuleAction={}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(7),r=n(8),a=n(9),o=n(10),s=n(0),l={url:null,article:{title:null,source:{},authors:[],tags:[],pageLinks:[]}};function c(t,e,n){var i;return e instanceof Array?(i=function(t){return!!t},n=e):i=e,n.map(t).find(i)}function d(t,e,n){var i;e instanceof Array?n=e:i=e;var r=n.map(t);return i&&(r=r.filter(function(t){return t.every(i)})),r.sort(function(t,e){return e.length-t.length})[0]}e.default=function(){var t,e=!1,n=a.default(),u=o.default();u?e=!0:u=l;var h=document.querySelector('script[type="application/ld+json"]');if(h&&h.textContent){var f=h.textContent.match(/^\s*\/\/<!\[CDATA\[([\s\S]*)\/\/\]\]>\s*$/);try{t=f?r.default([JSON.parse(f[1])]):r.default([JSON.parse(h.textContent)])}catch(t){}}return t?e=!0:(t=r.default(i.default(document.documentElement)))?e=!0:t=l,{isArticle:e,metadata:function(t,e,n){var i=[t,n,e];return{url:c(function(t){return s.matchGetAbsoluteUrl(t.url)},i),article:{title:c(function(t){return t.article.title},i),source:c(function(t){return t.article.source},function(t){return!!t.name},i),datePublished:c(function(t){return t.article.datePublished},i),dateModified:c(function(t){return t.article.dateModified},i),authors:d(function(t){return t.article.authors},function(t){return!!t.name},i),section:c(function(t){return t.article.section},i),description:c(function(t){return t.article.description},i),tags:d(function(t){return t.article.tags},i),pageLinks:d(function(t){return t.article.pageLinks},i)}}}(t,n,u)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),r={a:"href",img:"src",link:"href",meta:"content",object:"data",time:"datetime"},a=/schema\.org\/(.+)/;function o(t){return t.hasAttribute("itemscope")||t.hasAttribute("itemtype")}function s(t,e){var n={};if(t.hasAttribute("itemtype")){e&&(n["@context"]="http://schema.org");var i=t.getAttribute("itemtype"),r=i.match(a);r&&2===r.length?n["@type"]=r[1]:n["@type"]=i}return n}function l(t,e,n){return t.forEach(function(t){n.hasOwnProperty(t)?n[t]instanceof Array?n[t].push(e):n[t]=[n[t],e]:n[t]=e}),e}e.default=function t(e,n,a){if(void 0===n&&(n=[]),void 0===a&&(a=null),a&&e.hasAttribute("itemprop")){var c=i.getWords(e.getAttribute("itemprop"));o(e)?a=l(c,s(e),a):e.hasAttribute("itemid")||l(c,function(t){var e=t.tagName.toLowerCase();return r.hasOwnProperty(e)?t.getAttribute(r[e]):t.textContent}(e),a)}else o(e)&&n.push(a=s(e,!0));for(var d=0;d<e.children.length;d++)t(e.children[d],n,a);return n}},function(t,e,n){"use strict";function i(t,e){var n=t instanceof Array?t[0]:t;return e&&n?e(n):n}Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=t.find(function(t){return t.hasOwnProperty("@type")&&(t["@type"].endsWith("Article")||"BlogPosting"===t["@type"])});return e?{url:i(e.url),article:{title:i(e.headline)||i(e.name),source:i(e.publisher||e.sourceOrganization||e.provider,function(t){return{name:i(t.name),url:i(t.url)}})||{},datePublished:i(e.datePublished),dateModified:i(e.dateModified),authors:function(t,e){var n=t instanceof Array?t:t?[t]:[];return e?n.map(e):n}(e.author||e.creator,function(t){return{name:i(t.name),url:i(t.url)}}),section:i(e.articleSection)||i(e.printSection),description:i(e.description),tags:e.keywords?e.keywords instanceof Array?e.keywords:e.keywords.split(","):[],pageLinks:[]}}:null}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(0);e.default=function(){return{url:i.matchGetAbsoluteUrl(i.getElementAttribute(document.querySelector('link[rel="canonical"]'),function(t){return t.href}))||window.location.href.split(/\?|#/)[0],article:{title:document.title,source:{url:i.matchGetAbsoluteUrl(i.getElementAttribute(document.querySelector('link[rel="publisher"]'),function(t){return t.href}))||window.location.protocol+"//"+window.location.hostname},description:i.getElementAttribute(document.querySelector('meta[name="description"]'),function(t){return t.content}),authors:Array.from(document.querySelectorAll('meta[name="author"]')).map(function(t){return{name:t.content}}),tags:[],pageLinks:[]}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(0);function r(t,e){return i.getElementAttribute(e.find(function(e){return e.getAttribute("property")===t}),function(t){return t.content?t.content.toLowerCase():null})}e.default=function(){var t=Array.from(document.getElementsByTagName("meta"));return"article"===r("og:type",t)?{url:r("og:url",t),article:{title:r("og:title",t),source:{name:r("og:site_name",t)},datePublished:r("article:published_time",t),dateModified:r("article:modified_time",t),authors:t.filter(function(t){return"article:author"===t.getAttribute("property")}).map(function(t){var e=i.matchGetAbsoluteUrl(t.content);return e?{url:e}:{name:t.content}}),section:r("article:section",t),description:r("og:description",t),tags:t.filter(function(t){return"article:tag"===t.getAttribute("property")}).map(function(t){return t.content}),pageLinks:[]}}:null}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(12),r=n(13),a=n(0),o=n(15);function s(t){return Array.from(t.getElementsByTagName("p")).concat(Array.from(t.getElementsByTagName("li")))}e.default=function(t){var e,n;switch(t){case"analyze":var l=a.cloneNodeWithReference(window.document);n=s((e=new i.default(l).parse()).rootElement).map(function(t){return t.originalNode?t.originalNode:null}).filter(function(t){return!!t});break;case"mutate":e=new i.default(window.document).parse(),window.document.documentElement||window.document.appendChild(window.document.createElement("html")),window.document.head||window.document.documentElement.appendChild(window.document.createElement("head")),window.document.body||window.document.documentElement.appendChild(window.document.createElement("body")),window.document.body.innerHTML=e.content,n=s(window.document.body),o.default(window.document,e.title,e.byline);break;default:throw new Error("Unexpected value for mode")}return e.length?{excerpt:e.excerpt,elements:n.reduce(function(t,e){var n;return(n=a.getWords(e.textContent).length)&&t.push(new r.default(e,n)),t},[]),wordCount:a.getWords(e.textContent).length}:{excerpt:null,elements:[],wordCount:0}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),r=function(){function t(t,e){this.FLAG_STRIP_UNLIKELYS=1,this.FLAG_WEIGHT_CLASSES=2,this.FLAG_CLEAN_CONDITIONALLY=4,this.ELEMENT_NODE=1,this.TEXT_NODE=3,this.DEFAULT_MAX_ELEMS_TO_PARSE=0,this.DEFAULT_N_TOP_CANDIDATES=5,this.DEFAULT_TAGS_TO_SCORE="section,h2,h3,h4,h5,h6,p,td,pre".toUpperCase().split(","),this.REGEXPS={unlikelyCandidates:/-ad-|banner|breadcrumbs|combx|comment|community|cover-wrap|disqus|extra|foot|header|legends|menu|related|remark|replies|rss|shoutbox|sidebar|skyscraper|social|sponsor|supplemental|ad-break|agegate|pagination|pager|popup|yom-remote/i,okMaybeItsACandidate:/and|article|body|column|main|shadow/i,positive:/article|body|content|entry|hentry|h-entry|main|page|pagination|post|text|blog|story/i,negative:/hidden|^hid$| hid$| hid |^hid |banner|combx|comment|com-|contact|foot|footer|footnote|masthead|media|meta|outbrain|promo|related|scroll|share|shoutbox|sidebar|skyscraper|sponsor|shopping|tags|tool|widget/i,extraneous:/print|archive|comment|discuss|e[\-]?mail|share|reply|all|login|sign|single|utility/i,byline:/byline|author|dateline|writtenby|p-author/i,replaceFonts:/<(\/?)font[^>]*>/gi,normalize:/\s{2,}/g,videos:/\/\/(www\.)?((dailymotion|youtube|youtube-nocookie|player\.vimeo|v\.qq)\.com|(archive|upload\.wikimedia)\.org|player\.twitch\.tv)/i,nextLink:/(next|weiter|continue|>([^\|]|$)|»([^\|]|$))/i,prevLink:/(prev|earl|old|new|<|«)/i,whitespace:/^\s*$/,hasContent:/\S$/},this.DIV_TO_P_ELEMS=["A","BLOCKQUOTE","DL","DIV","IMG","OL","P","PRE","TABLE","UL","SELECT"],this.ALTER_TO_DIV_EXCEPTIONS=["DIV","ARTICLE","SECTION","P"],this.PRESENTATIONAL_ATTRIBUTES=["align","background","bgcolor","border","cellpadding","cellspacing","frame","hspace","rules","style","valign","vspace"],this.DEPRECATED_SIZE_ATTRIBUTE_ELEMS=["TABLE","TH","TD","HR","PRE"],this.PHRASING_ELEMS=["ABBR","AUDIO","B","BDO","BR","BUTTON","CITE","CODE","DATA","DATALIST","DFN","EM","EMBED","I","IMG","INPUT","KBD","LABEL","MARK","MATH","METER","NOSCRIPT","OBJECT","OUTPUT","PROGRESS","Q","RUBY","SAMP","SCRIPT","SELECT","SMALL","SPAN","STRONG","SUB","SUP","TEXTAREA","TIME","VAR","WBR"],this.CLASSES_TO_PRESERVE=["page"],e=e||{},this._doc=t,this._articleTitle=null,this._articleByline=null,this._articleDir=null,this._attempts=[],this._debug=!!e.debug,this._maxElemsToParse=e.maxElemsToParse||this.DEFAULT_MAX_ELEMS_TO_PARSE,this._nbTopCandidates=e.nbTopCandidates||this.DEFAULT_N_TOP_CANDIDATES,this._charThreshold=e.charThreshold||this.DEFAULT_CHAR_THRESHOLD,this._classesToPreserve=this.CLASSES_TO_PRESERVE.concat(e.classesToPreserve||[]),this._flags=this.FLAG_STRIP_UNLIKELYS|this.FLAG_WEIGHT_CLASSES|this.FLAG_CLEAN_CONDITIONALLY,this._debug?this.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if("undefined"!=typeof console){t=["Reader: (Readability) "].concat(t);console.log.apply(console,t)}}:this.log=function(){}}return t.prototype._postProcessContent=function(t){this._fixRelativeUris(t),this._cleanClasses(t)},t.prototype._removeNodes=function(t,e){for(var n=t.length-1;n>=0;n--){var i=t[n],r=i.parentNode;r&&(e&&!e.call(this,i,n,t)||r.removeChild(i))}},t.prototype._replaceNodeTags=function(t,e){for(var n=t.length-1;n>=0;n--){var i=t[n];this._setNodeTag(i,e)}},t.prototype._forEachNode=function(t,e){Array.prototype.forEach.call(t,e,this)},t.prototype._someNode=function(t,e){return Array.prototype.some.call(t,e,this)},t.prototype._everyNode=function(t,e){return Array.prototype.every.call(t,e,this)},t.prototype._concatNodeLists=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Array.prototype.slice,i=(t=n.call(t)).map(function(t){return n.call(t)});return Array.prototype.concat.apply([],i)},t.prototype._getAllNodesWithTag=function(t,e){return t.querySelectorAll?t.querySelectorAll(e.join(",")):[].concat.apply([],e.map(function(e){var n=t.getElementsByTagName(e);return Array.isArray(n)?n:Array.from(n)}))},t.prototype._cleanClasses=function(t){var e=this._classesToPreserve,n=(t.getAttribute("class")||"").split(/\s+/).filter(function(t){return-1!=e.indexOf(t)}).join(" ");for(n?t.setAttribute("class",n):t.removeAttribute("class"),t=t.firstElementChild;t;t=t.nextElementSibling)this._cleanClasses(t)},t.prototype._fixRelativeUris=function(t){var e=this._doc.baseURI,n=this._doc.documentURI;function i(t){if(e==n&&"#"==t.charAt(0))return t;try{return new URL(t,e).href}catch(t){}return t}var r=t.getElementsByTagName("a");this._forEachNode(r,function(t){var e=t.getAttribute("href");if(e)if(0===e.indexOf("javascript:")){var n=this._doc.createTextNode(t.textContent);t.parentNode.replaceChild(n,t)}else t.setAttribute("href",i(e))});var a=t.getElementsByTagName("img");this._forEachNode(a,function(t){var e=t.getAttribute("src");e&&t.setAttribute("src",i(e))})},t.prototype._getArticleTitle=function(){var t=this._doc,e="",n="";try{"string"!=typeof(e=n=t.title.trim())&&(e=n=this._getInnerText(t.getElementsByTagName("title")[0]))}catch(t){}var i=!1;function r(t){return t.split(/\s+/).length}if(/ [\|\-\\\/>»] /.test(e))i=/ [\\\/>»] /.test(e),r(e=n.replace(/(.*)[\|\-\\\/>»] .*/gi,"$1"))<3&&(e=n.replace(/[^\|\-\\\/>»]*[\|\-\\\/>»](.*)/gi,"$1"));else if(-1!==e.indexOf(": ")){var a=this._concatNodeLists(t.getElementsByTagName("h1"),t.getElementsByTagName("h2")),o=e.trim();this._someNode(a,function(t){return t.textContent.trim()===o})||(r(e=n.substring(n.lastIndexOf(":")+1))<3?e=n.substring(n.indexOf(":")+1):r(n.substr(0,n.indexOf(":")))>5&&(e=n))}else if(e.length>150||e.length<15){var s=t.getElementsByTagName("h1");1===s.length&&(e=this._getInnerText(s[0]))}var l=r(e=e.trim());return l<=4&&(!i||l!=r(n.replace(/[\|\-\\\/>»]+/g,""))-1)&&(e=n),e},t.prototype._prepDocument=function(){var t=this._doc;this._removeNodes(t.getElementsByTagName("style")),t.body&&this._replaceBrs(t.body),this._replaceNodeTags(t.getElementsByTagName("font"),"span")},t.prototype._nextElement=function(t){for(var e=t;e&&e.nodeType!=this.ELEMENT_NODE&&this.REGEXPS.whitespace.test(e.textContent);)e=e.nextSibling;return e},t.prototype._replaceBrs=function(t){this._forEachNode(this._getAllNodesWithTag(t,["br"]),function(t){for(var e=t.nextSibling,n=!1;(e=this._nextElement(e))&&"BR"==e.tagName;){n=!0;var i=e.nextSibling;e.parentNode.removeChild(e),e=i}if(n){var r=this._doc.createElement("p");for(t.parentNode.replaceChild(r,t),e=r.nextSibling;e;){if("BR"==e.tagName){var a=this._nextElement(e.nextSibling);if(a&&"BR"==a.tagName)break}if(!this._isPhrasingContent(e))break;var o=e.nextSibling;r.appendChild(e),e=o}for(;r.lastChild&&this._isWhitespace(r.lastChild);)r.removeChild(r.lastChild);"P"===r.parentNode.tagName&&this._setNodeTag(r.parentNode,"div")}})},t.prototype._setNodeTag=function(t,e){if(this.log("_setNodeTag",t,e),t.__JSDOMParser__)return t.localName=e.toLowerCase(),t.tagName=e.toUpperCase(),t;for(var n=t.ownerDocument.createElement(e);t.firstChild;)n.appendChild(t.firstChild);t.parentNode.replaceChild(n,t),n.originalNode=t.originalNode,t.readability&&(n.readability=t.readability);for(var i=0;i<t.attributes.length;i++)n.setAttribute(t.attributes[i].name,t.attributes[i].value);return n},t.prototype._prepArticle=function(t){this._cleanStyles(t),this._markDataTables(t),this._cleanConditionally(t,"form"),this._cleanConditionally(t,"fieldset"),this._clean(t,"object"),this._clean(t,"embed"),this._clean(t,"h1"),this._clean(t,"footer"),this._clean(t,"link"),this._clean(t,"aside"),this._forEachNode(t.children,function(t){this._cleanMatchedNodes(t,/share/)});var e=t.getElementsByTagName("h2");if(1===e.length){var n=(e[0].textContent.length-this._articleTitle.length)/this._articleTitle.length;if(Math.abs(n)<.5){(n>0?e[0].textContent.includes(this._articleTitle):this._articleTitle.includes(e[0].textContent))&&this._clean(t,"h2")}}this._clean(t,"iframe"),this._clean(t,"input"),this._clean(t,"textarea"),this._clean(t,"select"),this._clean(t,"button"),this._cleanHeaders(t),this._cleanConditionally(t,"table"),this._cleanConditionally(t,"ul"),this._cleanConditionally(t,"div"),this._removeNodes(t.getElementsByTagName("p"),function(t){return 0===t.getElementsByTagName("img").length+t.getElementsByTagName("embed").length+t.getElementsByTagName("object").length+t.getElementsByTagName("iframe").length&&!this._getInnerText(t,!1)}),this._forEachNode(this._getAllNodesWithTag(t,["br"]),function(t){var e=this._nextElement(t.nextSibling);e&&"P"==e.tagName&&t.parentNode.removeChild(t)}),this._forEachNode(this._getAllNodesWithTag(t,["table"]),function(t){var e=this._hasSingleTagInsideElement(t,"TBODY")?t.firstElementChild:t;if(this._hasSingleTagInsideElement(e,"TR")){var n=e.firstElementChild;if(this._hasSingleTagInsideElement(n,"TD")){var i=n.firstElementChild;i=this._setNodeTag(i,this._everyNode(i.childNodes,this._isPhrasingContent)?"p":"div"),t.parentNode.replaceChild(i,t)}}})},t.prototype._initializeNode=function(t){switch(t.readability={contentScore:0},t.tagName){case"DIV":t.readability.contentScore+=5;break;case"PRE":case"TD":case"BLOCKQUOTE":t.readability.contentScore+=3;break;case"ADDRESS":case"OL":case"UL":case"DL":case"DD":case"DT":case"LI":case"FORM":t.readability.contentScore-=3;break;case"H1":case"H2":case"H3":case"H4":case"H5":case"H6":case"TH":t.readability.contentScore-=5}t.readability.contentScore+=this._getClassWeight(t)},t.prototype._removeAndGetNext=function(t){var e=this._getNextNode(t,!0);return t.parentNode.removeChild(t),e},t.prototype._getNextNode=function(t,e){if(!e&&t.firstElementChild)return t.firstElementChild;if(t.nextElementSibling)return t.nextElementSibling;do{t=t.parentNode}while(t&&!t.nextElementSibling);return t&&t.nextElementSibling},t.prototype._checkByline=function(t,e){if(this._articleByline)return!1;if(void 0!==t.getAttribute)var n=t.getAttribute("rel");return!("author"!==n&&!this.REGEXPS.byline.test(e)||!this._isValidByline(t.textContent))&&(this._articleByline=t.textContent.trim(),!0)},t.prototype._getNodeAncestors=function(t,e){e=e||0;for(var n=0,i=[];t.parentNode&&(i.push(t.parentNode),!e||++n!==e);)t=t.parentNode;return i},t.prototype._grabArticle=function(t){this.log("**** grabArticle ****");var e=this._doc,n=null!==t;if(!(t=t||this._doc.body))return this.log("No body found in document. Abort."),null;for(var r=i.cloneNodeWithReference(t);;){for(var a=this._flagIsActive(this.FLAG_STRIP_UNLIKELYS),o=[],s=this._doc.documentElement;s;){var l=s.className+" "+s.id;if(this._isProbablyVisible(s))if(this._checkByline(s,l))s=this._removeAndGetNext(s);else if(a&&this.REGEXPS.unlikelyCandidates.test(l)&&!this.REGEXPS.okMaybeItsACandidate.test(l)&&"BODY"!==s.tagName&&"A"!==s.tagName)this.log("Removing unlikely candidate - "+l),s=this._removeAndGetNext(s);else if("DIV"!==s.tagName&&"SECTION"!==s.tagName&&"HEADER"!==s.tagName&&"H1"!==s.tagName&&"H2"!==s.tagName&&"H3"!==s.tagName&&"H4"!==s.tagName&&"H5"!==s.tagName&&"H6"!==s.tagName||!this._isElementWithoutContent(s)){if(-1!==this.DEFAULT_TAGS_TO_SCORE.indexOf(s.tagName)&&o.push(s),"DIV"===s.tagName){for(var c=null,d=s.firstChild;d;){var u=d.nextSibling;if(this._isPhrasingContent(d))null!==c?c.appendChild(d):this._isWhitespace(d)||(c=e.createElement("p"),s.replaceChild(c,d),c.appendChild(d));else if(null!==c){for(;c.lastChild&&this._isWhitespace(c.lastChild);)c.removeChild(c.lastChild);c=null}d=u}if(this._hasSingleTagInsideElement(s,"P")&&this._getLinkDensity(s)<.25){var h=s.children[0];h.originalNode=s.originalNode,s.parentNode.replaceChild(h,s),s=h,o.push(s)}else this._hasChildBlockElement(s)||(s=this._setNodeTag(s,"p"),o.push(s))}s=this._getNextNode(s)}else s=this._removeAndGetNext(s);else this.log("Removing hidden node - "+l),s=this._removeAndGetNext(s)}var f=[];this._forEachNode(o,function(t){if(t.parentNode&&void 0!==t.parentNode.tagName){var e=this._getInnerText(t);if(!(e.length<25)){var n=this._getNodeAncestors(t,3);if(0!==n.length){var i=0;i+=1,i+=e.split(",").length,i+=Math.min(Math.floor(e.length/100),3),this._forEachNode(n,function(t,e){if(t.tagName&&t.parentNode&&void 0!==t.parentNode.tagName){if(void 0===t.readability&&(this._initializeNode(t),f.push(t)),0===e)var n=1;else n=1===e?2:3*e;t.readability.contentScore+=i/n}})}}}});for(var p=[],g=0,m=f.length;g<m;g+=1){var _=f[g],y=_.readability.contentScore*(1-this._getLinkDensity(_));_.readability.contentScore=y,this.log("Candidate:",_,"with score "+y);for(var b=0;b<this._nbTopCandidates;b++){var v=p[b];if(!v||y>v.readability.contentScore){p.splice(b,0,_),p.length>this._nbTopCandidates&&p.pop();break}}}var E,N=p[0]||null,T=!1;if(null===N||"BODY"===N.tagName){N=e.createElement("DIV"),T=!0;for(var A=t.childNodes;A.length;)this.log("Moving child out:",A[0]),N.appendChild(A[0]);t.appendChild(N),this._initializeNode(N)}else if(N){for(var C=[],w=1;w<p.length;w++)p[w].readability.contentScore/N.readability.contentScore>=.75&&C.push(this._getNodeAncestors(p[w]));if(C.length>=3)for(E=N.parentNode;"BODY"!==E.tagName;){for(var S=0,R=0;R<C.length&&S<3;R++)S+=Number(C[R].includes(E));if(S>=3){N=E;break}E=E.parentNode}N.readability||this._initializeNode(N),E=N.parentNode;for(var L=N.readability.contentScore,O=L/3;"BODY"!==E.tagName;)if(E.readability){var P=E.readability.contentScore;if(P<O)break;if(P>L){N=E;break}L=E.readability.contentScore,E=E.parentNode}else E=E.parentNode;for(E=N.parentNode;"BODY"!=E.tagName&&1==E.children.length;)E=(N=E).parentNode;N.readability||this._initializeNode(N)}var x=e.createElement("DIV");n&&(x.id="readability-content");for(var I=Math.max(10,.2*N.readability.contentScore),B=(E=N.parentNode).children,M=0,D=B.length;M<D;M++){var k=B[M],G=!1;if(this.log("Looking at sibling node:",k,k.readability?"with score "+k.readability.contentScore:""),this.log("Sibling has score",k.readability?k.readability.contentScore:"Unknown"),k===N)G=!0;else{var W=0;if(k.className===N.className&&""!==N.className&&(W+=.2*N.readability.contentScore),k.readability&&k.readability.contentScore+W>=I)G=!0;else if("P"===k.nodeName){var U=this._getLinkDensity(k),H=this._getInnerText(k),j=H.length;j>80&&U<.25?G=!0:j<80&&j>0&&0===U&&-1!==H.search(/\.( |$)/)&&(G=!0)}}G&&(this.log("Appending node:",k),-1===this.ALTER_TO_DIV_EXCEPTIONS.indexOf(k.nodeName)&&(this.log("Altering sibling:",k,"to div."),k=this._setNodeTag(k,"div")),x.appendChild(k),M-=1,D-=1)}if(this._debug&&this.log("Article content pre-prep: "+x.innerHTML),this._prepArticle(x),this._debug&&this.log("Article content post-prep: "+x.innerHTML),T)N.id="readability-page-1",N.className="page";else{var F=e.createElement("DIV");F.id="readability-page-1",F.className="page";for(var X=x.childNodes;X.length;)F.appendChild(X[0]);x.appendChild(F)}this._debug&&this.log("Article content after paging: "+x.innerHTML);var V=!0,Y=this._getInnerText(x,!0).length;if(Y<this._charThreshold)if(V=!1,this._removeNodes(t.childNodes),this._forEachNode(r.childNodes,function(e){t.appendChild(i.cloneNodeWithReference(e))}),this._flagIsActive(this.FLAG_STRIP_UNLIKELYS))this._removeFlag(this.FLAG_STRIP_UNLIKELYS),this._attempts.push({articleContent:x,textLength:Y});else if(this._flagIsActive(this.FLAG_WEIGHT_CLASSES))this._removeFlag(this.FLAG_WEIGHT_CLASSES),this._attempts.push({articleContent:x,textLength:Y});else if(this._flagIsActive(this.FLAG_CLEAN_CONDITIONALLY))this._removeFlag(this.FLAG_CLEAN_CONDITIONALLY),this._attempts.push({articleContent:x,textLength:Y});else{if(this._attempts.push({articleContent:x,textLength:Y}),this._attempts.sort(function(t,e){return e.textLength-t.textLength}),!this._attempts[0].textLength)return null;x=this._attempts[0].articleContent,V=!0}if(V){var z=[E,N].concat(this._getNodeAncestors(E));return this._someNode(z,function(t){if(!t.tagName)return!1;var e=t.getAttribute("dir");return!!e&&(this._articleDir=e,!0)}),x}}},t.prototype._isValidByline=function(t){return("string"==typeof t||t instanceof String)&&((t=t.trim()).length>0&&t.length<100)},t.prototype._getArticleMetadata=function(){var t={},e={},n=this._doc.getElementsByTagName("meta"),i=/\s*(dc|dcterm|og|twitter)\s*:\s*(author|creator|description|title)\s*/gi,r=/^\s*(?:(dc|dcterm|og|twitter|weibo:(article|webpage))\s*[\.:]\s*)?(author|creator|description|title)\s*$/i;return this._forEachNode(n,function(t){var n=t.getAttribute("name"),a=t.getAttribute("property"),o=t.getAttribute("content"),s=null,l=null;if(a&&(s=a.match(i)))for(var c=s.length-1;c>=0;c--)l=s[c].toLowerCase().replace(/\s/g,""),e[l]=o.trim();!s&&n&&r.test(n)&&(l=n,o&&(l=l.toLowerCase().replace(/\s/g,"").replace(/\./g,":"),e[l]=o.trim()))}),t.title=e["dc:title"]||e["dcterm:title"]||e["og:title"]||e["weibo:article:title"]||e["weibo:webpage:title"]||e.title||e["twitter:title"],t.title||(t.title=this._getArticleTitle()),t.byline=e["dc:creator"]||e["dcterm:creator"]||e.author,t.excerpt=e["dc:description"]||e["dcterm:description"]||e["og:description"]||e["weibo:article:description"]||e["weibo:webpage:description"]||e.description||e["twitter:description"],t},t.prototype._removeScripts=function(t){this._removeNodes(t.getElementsByTagName("script"),function(t){return t.nodeValue="",t.removeAttribute("src"),!0}),this._removeNodes(t.getElementsByTagName("noscript"))},t.prototype._hasSingleTagInsideElement=function(t,e){return 1==t.children.length&&t.children[0].tagName===e&&!this._someNode(t.childNodes,function(t){return t.nodeType===this.TEXT_NODE&&this.REGEXPS.hasContent.test(t.textContent)})},t.prototype._isElementWithoutContent=function(t){return t.nodeType===this.ELEMENT_NODE&&0==t.textContent.trim().length&&(0==t.children.length||t.children.length==t.getElementsByTagName("br").length+t.getElementsByTagName("hr").length)},t.prototype._hasChildBlockElement=function(t){return this._someNode(t.childNodes,function(t){return-1!==this.DIV_TO_P_ELEMS.indexOf(t.tagName)||this._hasChildBlockElement(t)})},t.prototype._isPhrasingContent=function(t){return t.nodeType===this.TEXT_NODE||-1!==this.PHRASING_ELEMS.indexOf(t.tagName)||("A"===t.tagName||"DEL"===t.tagName||"INS"===t.tagName)&&this._everyNode(t.childNodes,this._isPhrasingContent)},t.prototype._isWhitespace=function(t){return t.nodeType===this.TEXT_NODE&&0===t.textContent.trim().length||t.nodeType===this.ELEMENT_NODE&&"BR"===t.tagName},t.prototype._getInnerText=function(t,e){e=void 0===e||e;var n=t.textContent.trim();return e?n.replace(this.REGEXPS.normalize," "):n},t.prototype._getCharCount=function(t,e){return e=e||",",this._getInnerText(t).split(e).length-1},t.prototype._cleanStyles=function(t){if(t&&"svg"!==t.tagName.toLowerCase()){for(var e=0;e<this.PRESENTATIONAL_ATTRIBUTES.length;e++)t.removeAttribute(this.PRESENTATIONAL_ATTRIBUTES[e]);-1!==this.DEPRECATED_SIZE_ATTRIBUTE_ELEMS.indexOf(t.tagName)&&(t.removeAttribute("width"),t.removeAttribute("height"));for(var n=t.firstElementChild;null!==n;)this._cleanStyles(n),n=n.nextElementSibling}},t.prototype._getLinkDensity=function(t){var e=this._getInnerText(t).length;if(0===e)return 0;var n=0;return this._forEachNode(t.getElementsByTagName("a"),function(t){n+=this._getInnerText(t).length}),n/e},t.prototype._getClassWeight=function(t){if(!this._flagIsActive(this.FLAG_WEIGHT_CLASSES))return 0;var e=0;return"string"==typeof t.className&&""!==t.className&&(this.REGEXPS.negative.test(t.className)&&(e-=25),this.REGEXPS.positive.test(t.className)&&(e+=25)),"string"==typeof t.id&&""!==t.id&&(this.REGEXPS.negative.test(t.id)&&(e-=25),this.REGEXPS.positive.test(t.id)&&(e+=25)),e},t.prototype._clean=function(t,e){var n=-1!==["object","embed","iframe"].indexOf(e);this._removeNodes(t.getElementsByTagName(e),function(t){if(n){var e=[].map.call(t.attributes,function(t){return t.value}).join("|");if(this.REGEXPS.videos.test(e))return!1;if(this.REGEXPS.videos.test(t.innerHTML))return!1}return!0})},t.prototype._hasAncestorTag=function(t,e,n,i){n=n||3,e=e.toUpperCase();for(var r=0;t.parentNode;){if(n>0&&r>n)return!1;if(t.parentNode.tagName===e&&(!i||i(t.parentNode)))return!0;t=t.parentNode,r++}return!1},t.prototype._getRowAndColumnCount=function(t){for(var e=0,n=0,i=t.getElementsByTagName("tr"),r=0;r<i.length;r++){var a=i[r].getAttribute("rowspan")||0;a&&(a=parseInt(a,10)),e+=a||1;for(var o=0,s=i[r].getElementsByTagName("td"),l=0;l<s.length;l++){var c=s[l].getAttribute("colspan")||0;c&&(c=parseInt(c,10)),o+=c||1}n=Math.max(n,o)}return{rows:e,columns:n}},t.prototype._markDataTables=function(t){for(var e=t.getElementsByTagName("table"),n=0;n<e.length;n++){var i=e[n];if("presentation"!=i.getAttribute("role"))if("0"!=i.getAttribute("datatable"))if(i.getAttribute("summary"))i._readabilityDataTable=!0;else{var r=i.getElementsByTagName("caption")[0];if(r&&r.childNodes.length>0)i._readabilityDataTable=!0;else{if(["col","colgroup","tfoot","thead","th"].some(function(t){return!!i.getElementsByTagName(t)[0]}))this.log("Data table because found data-y descendant"),i._readabilityDataTable=!0;else if(i.getElementsByTagName("table")[0])i._readabilityDataTable=!1;else{var a=this._getRowAndColumnCount(i);a.rows>=10||a.columns>4?i._readabilityDataTable=!0:i._readabilityDataTable=a.rows*a.columns>10}}}else i._readabilityDataTable=!1;else i._readabilityDataTable=!1}},t.prototype._cleanConditionally=function(t,e){if(this._flagIsActive(this.FLAG_CLEAN_CONDITIONALLY)){var n="ul"===e||"ol"===e;this._removeNodes(t.getElementsByTagName(e),function(t){if(this._hasAncestorTag(t,"table",-1,function(t){return t._readabilityDataTable}))return!1;var e=this._getClassWeight(t);if(this.log("Cleaning Conditionally",t),e+0<0)return!0;if(this._getCharCount(t,",")<10){for(var i=t.getElementsByTagName("p").length,r=t.getElementsByTagName("img").length,a=t.getElementsByTagName("li").length-100,o=t.getElementsByTagName("input").length,s=0,l=t.getElementsByTagName("embed"),c=0,d=l.length;c<d;c+=1)this.REGEXPS.videos.test(l[c].src)||(s+=1);var u=this._getLinkDensity(t),h=this._getInnerText(t).length;return r>1&&i/r<.5&&!this._hasAncestorTag(t,"figure")||!n&&a>i||o>Math.floor(i/3)||!n&&h<25&&(0===r||r>2)&&!this._hasAncestorTag(t,"figure")||!n&&e<25&&u>.2||e>=25&&u>.5||1===s&&h<75||s>1}return!1})}},t.prototype._cleanMatchedNodes=function(t,e){for(var n=this._getNextNode(t,!0),i=this._getNextNode(t);i&&i!=n;)i=e.test(i.className+" "+i.id)?this._removeAndGetNext(i):this._getNextNode(i)},t.prototype._cleanHeaders=function(t){for(var e=1;e<3;e+=1)this._removeNodes(t.getElementsByTagName("h"+e),function(t){return this._getClassWeight(t)<0})},t.prototype._flagIsActive=function(t){return(this._flags&t)>0},t.prototype._removeFlag=function(t){this._flags=this._flags&~t},t.prototype._isProbablyVisible=function(t){return"none"!=t.style.display&&!t.hasAttribute("hidden")},t.prototype.isProbablyReaderable=function(t){var e=this._getAllNodesWithTag(this._doc,["p","pre"]),n=this._getAllNodesWithTag(this._doc,["div > br"]);if(n.length){var i=new Set;[].forEach.call(n,function(t){i.add(t.parentNode)}),e=[].concat.apply(Array.from(i),e)}t||(t=this._isProbablyVisible);var r=0;return this._someNode(e,function(e){if(t&&!t(e))return!1;var n=e.className+" "+e.id;if(this.REGEXPS.unlikelyCandidates.test(n)&&!this.REGEXPS.okMaybeItsACandidate.test(n))return!1;if(e.matches&&e.matches("li p"))return!1;var i=e.textContent.trim().length;return!(i<140)&&(r+=Math.sqrt(i-140))>20})},t.prototype.parse=function(){if(this._maxElemsToParse>0){var t=this._doc.getElementsByTagName("*").length;if(t>this._maxElemsToParse)throw new Error("Aborting parsing document; "+t+" elements found")}this._removeScripts(this._doc),this._prepDocument();var e=this._getArticleMetadata();this._articleTitle=e.title;var n=this._grabArticle();if(!n)return null;if(this.log("Grabbed: "+n.innerHTML),this._postProcessContent(n),!e.excerpt){var i=n.getElementsByTagName("p");i.length>0&&(e.excerpt=i[0].textContent.trim())}var r=n.textContent;return{title:this._articleTitle,byline:e.byline||this._articleByline,dir:this._articleDir,content:n.innerHTML,textContent:r,length:r.length,excerpt:e.excerpt,rootElement:n}},t}();e.default=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(1),r=n(14),a=function(){function t(t,e){this._element=t,this._contentOffset=this._getContentOffset(),this._contentRect=this._getContentRect(),this._lineHeight=this._getLineHeight()||this._contentRect.height||1,this._wordCount=e,this._setLines(new i.default([-this._wordCount]))}return t.prototype.isLineReadable=function(t){return this._contentRect.top+t.top>=window.pageYOffset&&this._contentRect.top+t.top<=window.innerHeight+window.pageYOffset&&!t.isRead()},t.prototype._setLines=function(t){var e=Math.max(1,Math.floor(this._contentRect.height/this._lineHeight)),n=Math.floor(this._wordCount/e),i=this._wordCount%e;this._lines=[];for(var a=0,o=0;a<e;a++){var s=n+(i>0?i- --i:0);this._lines.push(new r.default(this._lineHeight*a,this._lineHeight,t.slice(o,s))),o+=s}},t.prototype._getLineHeight=function(){var t=document.createElement("span");t.innerHTML="&nbsp;",this._element.appendChild(t);var e=t.getBoundingClientRect().height;return t.remove(),e},t.prototype._getContentOffset=function(){var t=window.getComputedStyle(this._element),e=parseInt(t.borderTopWidth),n=parseInt(t.borderRightWidth),i=parseInt(t.borderBottomWidth),r=parseInt(t.borderLeftWidth);return{top:e+parseInt(t.paddingTop),right:n+parseInt(t.paddingRight),bottom:i+parseInt(t.paddingBottom),left:r+parseInt(t.paddingLeft)}},t.prototype._getContentRect=function(){var t=this._element.getBoundingClientRect();return{top:window.pageYOffset+t.top+this._contentOffset.top,left:t.left+this._contentOffset.left,width:t.width-(this._contentOffset.left+this._contentOffset.right),height:t.height-(this._contentOffset.top+this._contentOffset.bottom)}},t.prototype._setBackgroundProgress=function(){var t=this.getReadState().getPercentComplete();this._element.style.backgroundImage="linear-gradient(to right, pink "+t+"%, transparent "+t+"%)"},t.prototype.updateOffset=function(){var t=this._getContentRect();t.top===this._contentRect.top&&t.left===this._contentRect.left&&t.width===this._contentRect.width&&t.height===this._contentRect.height||(this._contentRect=t,this._setLines(this.getReadState()))},t.prototype.showOverlay=function(t){t?(this._element.style.boxShadow="inset 0 0 0 3px red",this._setBackgroundProgress()):(this._element.style.boxShadow="",this._element.style.backgroundImage=""),this._showOverlay=t},t.prototype.isReadable=function(){var t=this;return this._lines.some(function(e){return t.isLineReadable(e)})},t.prototype.readWord=function(){var t=this,e=this._lines.find(function(e){return t.isLineReadable(e)});if(e){var n=e.readWord();return this._showOverlay&&n&&this._setBackgroundProgress(),n}return!1},t.prototype.getReadState=function(){return new i.default(this._lines.map(function(t){return t.readState}))},t.prototype.setReadState=function(t){this._setLines(t),this._showOverlay&&this._setBackgroundProgress()},t.prototype.isRead=function(){return!this._lines.some(function(t){return!t.isRead()})},Object.defineProperty(t.prototype,"offsetTop",{get:function(){return this._contentRect.top},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"wordCount",{get:function(){return this._wordCount},enumerable:!0,configurable:!0}),t}();e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e,n){this._top=t,this._readState=n}return t.prototype.isRead=function(){return this._readState.isComplete()},t.prototype.readWord=function(){return this._readState.readWord()},Object.defineProperty(t.prototype,"readState",{get:function(){return this._readState},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"top",{get:function(){return this._top},enumerable:!0,configurable:!0}),t}();e.default=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});function i(t,e){return/^\/\/|https?:/i.test(e)?e.replace(/^\/\/|http:\/\//,"https://"):/^\//.test(e)?"https://"+new URL(t).host+e:t.replace(/^http:/,"https:")+(/\/$/.test(t)?"":"/")+e}e.default=function(t,e,n){if(!t.querySelectorAll('meta[name="viewport"]').length){var r=t.createElement("meta");r.setAttribute("name","viewport"),r.setAttribute("content","width=device-width,initial-scale=1,user-scalable=no"),t.head.appendChild(r),window.setTimeout(function(){window.scrollTo(0,0)},500)}Array.from(t.getElementsByTagName("link")).forEach(function(t){t.rel&&"stylesheet"===t.rel.toLowerCase()&&t.remove()}),Array.from(t.getElementsByTagName("style")).forEach(function(t){t.remove()}),t.documentElement.removeAttribute("style"),t.body.removeAttribute("style"),Array.from(t.getElementsByTagName("a")).forEach(function(t){t.removeAttribute("href")}),Array.from(t.getElementsByTagName("img")).forEach(function(t){if(t.hasAttribute("data-pattern")&&t.hasAttribute("data-widths"))try{var e=JSON.parse(t.getAttribute("data-widths")).master,n=e.filter(function(t){return t.size<=800}),r=void 0;return r=n.length?n.sort(function(t,e){return e.size-t.size})[0].filename:e.sort(function(t,e){return t.size-e.size})[0].filename,void t.setAttribute("src",t.getAttribute("data-pattern").replace("{{file}}",r))}catch(t){}var a=t.getAttribute("data-rrit-base-url");if(a){var o=t.getAttribute("data-rrit-src")||t.getAttribute("data-src");o&&t.setAttribute("src",i(t.getAttribute("data-rrit-base-url"),o.trim()));var s=t.getAttribute("data-rrit-srcset")||t.getAttribute("data-srcset");s&&t.setAttribute("srcset",s.split(",").map(function(t){var e=t.trim().split(/\s+/),n=i(a,e[0]);return 2===e.length?n+" "+e[1]:n}).join(", "))}});var a=t.createElement("style");if(a.type="text/css",a.textContent="\nhtml {\n\tfont-family: serif;\n\tfont-size: 16pt;\n\tline-height: 1.35em;\n\tcolor: #222;\n}\nbody {\n\tmargin: 10px auto;\n\tpadding: 0 10px 100px 10px;\n\tmax-width: 600px;\n}\nbody * {\n\tmax-width: 100%;\n}\nimg {\n\theight: auto !important;\n}\n#rrit-title {\n\tfont-size: 20pt;\n\tfont-family: sans-serif;\n\tline-height: 1.25em;\n\tmargin: 20px 0 10px 0;\n}\n#rrit-byline {\n\tfont-style: italic;\n\tmargin-bottom: 20px;\n}\n",t.body.appendChild(a),n){var o=t.createElement("div");o.id="rrit-byline",o.textContent=n,t.body.insertBefore(o,t.body.children[0])}if(e){var s=t.createElement("h1");s.id="rrit-title",s.textContent=e,t.body.insertBefore(s,t.body.children[0])}}}]);